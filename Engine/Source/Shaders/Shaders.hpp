#pragma once
#include<map>
#include<string>
namespace vh {
  const std::map<std::string, std::string> Shaders = {{"SkyDome_VS.glsl","\nlayout(location = 0) in vec3 iVertexPos;\n\nout vec3 fTexCoord;\n\nuniform mat4 uMVP;\n\nvoid main() {\n gl_Position = uMVP * vec4(iVertexPos, 1.0);\n fTexCoord = iVertexPos;\n}\n"},{"OSD_VS.glsl","\nlayout(location = 0) in vec2 iVertexPos;\n\nuniform vec4 uBounds; \nout vec2 fTexCoord;\n\nvoid main() {\n gl_Position.xy = iVertexPos;\n gl_Position.z = 0.1;\n gl_Position.w = 1.0;\n fTexCoord = vec2(\n (iVertexPos.x - uBounds.x) / uBounds.z,\n 1 - (iVertexPos.y - 1 + uBounds.y) / uBounds.w\n );\n }\n"},{"Flow_VS.glsl","\nlayout(location = 0) in vec2 iVertexPos;\n\nuniform vec4 uBounds; uniform float uTime;\n\nout vec2 fTexCoord;\nout float fTime;\n\nvoid main() {\n gl_Position.xy = iVertexPos;\n gl_Position.z = 0.1;\n gl_Position.w = 1.0;\n fTexCoord = vec2(\n (iVertexPos.x - uBounds.x) / uBounds.z,\n (uBounds.y + uBounds.w - iVertexPos.y) / uBounds.w\n );\n fTime = uTime;\n }\n"},{"Flow_FS.glsl","\nin lowp vec2 fTexCoord;\nin lowp float fTime;\n\nout lowp vec4 color;\n\nuniform sampler2D uSampler;\n\nfloat rand(vec2 co){\n return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n}\n\nfloat rand(float f)\n{\n return f * 43758.5453;\n}\n\nfloat drop(float f, float time)\n{\n float shift = fract(time);\n\n float r1 = fract(trunc(time + 15234.0) * 0.9412);\n float r2 = fract(trunc(time + 6134.0) * 0.7162);\n\n float dist = length(fTexCoord - vec2(r1, r2));\n\n if (dist < 0.2 * shift)\n {\n return 0.9 + 0.2 * sin(shift) * f;\n }\n\n return f;\n}\n\nvoid main() {\n float time = fTime * 5.0f;\n\n float a = mix(\n 0.5f + 0.25f * sin(time * 0.5f),\n 0.5f + 0.25f * sin(time * 0.25f),\n length(fTexCoord - vec2(0.5, 0.5))\n );\n\n float b = mix(\n 0.5f + 0.25f * sin(time * 0.5f),\n 0.5f + 0.25f * sin(time),\n length(fTexCoord - vec2(0.5, 0.5))\n );\n\n float c = mix(\n 0.5f + 0.25f * sin(time * 0.5f),\n 0.5f + 0.25f * sin(time * 0.7f),\n length(fTexCoord - vec2(0.5, 0.5))\n );\n\n float mult = step(\n length(fTexCoord - vec2(0.5, 0.5)),\n 0.5);\n\n/*\n mult = drop(mult, fTime);\n mult = drop(mult, fTime + 68134.44);\n mult = drop(mult, fTime + 6814.79);\n mult = drop(mult, fTime + 41214.12);\n mult = drop(mult, fTime + 5162.50);\n*/\n\n color = mult * vec4(\n a + 0.1f * rand(fTexCoord),\n b + 0.1f * rand(fTexCoord),\n c + 0.1f * rand(fTexCoord),\n 1.0f);\n}\n"},{"SimpleShader_VS.glsl","\nlayout(location = 0) in vec3 iVertexPos;\nlayout(location = 1) in vec3 iVertexNormal;\n\nlayout(location = 2) in vec3 iAmbientColor;\nlayout(location = 3) in vec3 iDiffuseColor;\nlayout(location = 4) in vec3 iSpecularColor;\n\nlayout(location = 5) in vec2 iUV;\n\nout vec3 fAmbientColor;\nout vec3 fDiffuseColor;\nout vec3 fSpecularColor;\n\nout vec3 fNormal_cameraspace;\nout vec3 fLightDirection_cameraspace;\nout vec3 fEyeDirection_cameraspace;\n\nout float fLightIntensity;\n\nout vec2 fUV;\n\nuniform mat4 uMVP;\nuniform mat4 uM;\nuniform mat4 uV;\n\nuniform vec3 uLightPosition;\nuniform float uLightIntensity;\n\nvoid main() {\n gl_Position = uMVP * vec4(iVertexPos, 1);\n\n vec3 position_worldspace = (uM * vec4(iVertexPos, 1)).xyz;\n\n vec3 iVertexPos_cameraspace = (uV * uM * vec4(iVertexPos, 1)).xyz;\n fEyeDirection_cameraspace = vec3(0) - iVertexPos_cameraspace;\n\n vec3 lightPosition_cameraspace = (uV * vec4(uLightPosition, 1)).xyz;\n fLightDirection_cameraspace = lightPosition_cameraspace + fEyeDirection_cameraspace;\n\n fNormal_cameraspace = (uV * uM * vec4(iVertexNormal, 0)).xyz;\n\n fAmbientColor = iAmbientColor;\n fDiffuseColor = iDiffuseColor;\n fSpecularColor = iSpecularColor;\n\n fLightIntensity = uLightIntensity;\n\n fUV = iUV;\n}\n"},{"OSD_FS.glsl","\nin lowp vec2 fTexCoord;\n\nout lowp vec4 color;\n\nuniform sampler2D uSampler;\n\nvoid main() {\n color = texture(uSampler, fTexCoord);\n}\n"},{"SkyDome_FS.glsl","\nin lowp vec3 fTexCoord;\n\nout lowp vec3 color;\n\nuniform samplerCube uSkySampler;\n\nvoid main() {\n color = texture(uSkySampler, fTexCoord).rgb;\n}\n"},{"SimpleShader_FS.glsl","\nin lowp vec2 fUV;\n\nin lowp vec3 fAmbientColor;\nin lowp vec3 fDiffuseColor;\nin lowp vec3 fSpecularColor;\n\nin lowp vec3 fNormal_cameraspace;\nin lowp vec3 fLightDirection_cameraspace;\nin lowp vec3 fEyeDirection_cameraspace;\nin lowp float fLightDistance;\n\nin lowp float fLightIntensity;\n\nout lowp vec3 color;\n\nuniform sampler2D textureSampler;\n\nvoid main() {\n lowp vec3 n = normalize(fNormal_cameraspace);\n lowp vec3 l = normalize(fLightDirection_cameraspace);\n\n lowp vec3 E = normalize(fEyeDirection_cameraspace);\n lowp vec3 R = reflect(- l, n);\n lowp float cosAlpha = clamp(dot(E, R), 0, 1);\n\n lowp float cosTheta = clamp(dot(n, l), 0, 1);\n\n lowp vec3 temp;\n\n color = fAmbientColor * 0.1 +\n (fDiffuseColor + texture(textureSampler, fUV).rgb) * cosTheta * fLightIntensity +\n fSpecularColor * pow(cosAlpha, 5) * fLightIntensity;\n}\n"},};
}